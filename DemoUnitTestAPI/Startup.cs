using System;
using System.Diagnostics;
using System.IO;
using DemoUnitTestAPI.Contexts;
using DemoUnitTestAPI.Interfaces;
using DemoUnitTestAPI.Repositories;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;

namespace DemoUnitTestAPI
{
    /// <summary>
    /// Startup Class
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// Configuration property.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// Static Logging Factory.
        /// </summary>
        public static readonly ILoggerFactory ApiLoggerFactory = LoggerFactory.Create(builder => { builder.AddDebug(); });

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();

            var connectionString = Configuration.GetConnectionString("DefaultConnection");

            if (!string.IsNullOrWhiteSpace(connectionString))
            {
                services.AddDbContextPool<ContactsDbContext>(options =>
                    {
                        options.UseSqlServer(connectionString, opts => opts.CommandTimeout((int)TimeSpan.FromMinutes(60).TotalSeconds));
                        options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

                        if (Debugger.IsAttached)
                        {
                            options.EnableSensitiveDataLogging();
                            options.UseLoggerFactory(ApiLoggerFactory);
                        }
                    }
                );
            }
            else
            {
                services.AddDbContextPool<ContactsDbContext>(options => { });
            }

            services.AddScoped<IContactsRepository, ContactsRepository>();

            // Register the Swagger generator, defining 1 or more Swagger documents.
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1",
                    new OpenApiInfo
                    {
                        Title = "DemoAPIUnitTests",
                        Version = "v1"
                    });

                // Locate the XML file being generated by ASP.NET Core.
                const string xmlFile = "swagger.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                // Tell Swagger to use XML comments.
                c.IncludeXmlComments(xmlPath);
            });
    }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.)
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "DemoAPIUnitTests V1");
            });

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
